(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{147:function(e,a,t){"use strict";t.r(a);var s=t(0),n=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"nunjucks-笔记"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nunjucks-笔记","aria-hidden":"true"}},[e._v("#")]),e._v(" nunjucks 笔记")]),e._v(" "),t("h2",{attrs:{id:"文件拓展名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#文件拓展名","aria-hidden":"true"}},[e._v("#")]),e._v(" 文件拓展名")]),e._v(" "),t("p",[e._v("可用任意拓展名来命名 "),t("code",[e._v("Nunjucks")]),e._v(" 模板或文件，但推荐使用 "),t("code",[e._v(".njk")])]),e._v(" "),t("h2",{attrs:{id:"变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量","aria-hidden":"true"}},[e._v("#")]),e._v(" 变量")]),e._v(" "),t("p",[e._v("可以像 "),t("code",[e._v("js")]),e._v(" 一样获取变量属性")]),e._v(" "),t("div",{staticClass:"language-njk extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("{{username}}\n{{foo['bar']}}\n")])])]),t("p",[e._v("变量的值为 "),t("code",[e._v("undefined")]),e._v(" 或者 "),t("code",[e._v("null")]),e._v(" 将不显示，对象也一样。")]),e._v(" "),t("h2",{attrs:{id:"过滤器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#过滤器","aria-hidden":"true"}},[e._v("#")]),e._v(" 过滤器")]),e._v(" "),t("p",[e._v("过滤器是一些可以执行变量的函数，通过管道操作符 "),t("code",[e._v("|")]),e._v(" 调用，并可以接受参数。")]),e._v(" "),t("div",{staticClass:"language-njk extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{{foo | title}}\n{{foo | join(",")}}\n{{foo | replace("foo", "bar") | capitalize}} //链式过滤器\n')])])]),t("p",[e._v("可以自定义过滤器。")]),e._v(" "),t("h2",{attrs:{id:"模板继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模板继承","aria-hidden":"true"}},[e._v("#")]),e._v(" 模板继承")]),e._v(" "),t("p",[e._v("写模板时可定义 "),t("code",[e._v("block")]),e._v(" ，子模板可以覆盖他，同时支持多层继承。")]),e._v(" "),t("div",{staticClass:"language-njk extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//父 .parent.njk\n{% block header %}\nThis is the default content\n{% endblock %}\n\n<section class="left">\n    {% block left %}{% endblock %}\n</section>\n\n<section class="right">\n    {% block right %}\n    This is more content\n    {% endblock %}\n</section>\n\n//子\n{% extends "parent.njk" %}\n\n{% block left %}\nThis is the left side\n{% endblock %}\n\n{% block right %}\nThis is the right side\n{% endblock %}\n\n//result\nThis is the header content\n\n<section class="left">\n    This is the left side\n</section>\n\n<section class="right">\n    This is the right side\n</section>\n')])])]),t("p",[e._v("模板可以是一个变量，就可以动态指定继承的模板。")]),e._v(" "),t("div",{staticClass:"language-njk extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("{% extends parentTpl %}\n")])])]),t("p",[t("code",[e._v("extends")]),e._v(" 可以接受任意表达式，只要它最终返回一个字符串或是模板所编译的对象。")]),e._v(" "),t("div",{staticClass:"language-njk extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{% extends name + ".html" %}\n')])])]),t("h2",{attrs:{id:"super"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#super","aria-hidden":"true"}},[e._v("#")]),e._v(" super")]),e._v(" "),t("p",[e._v("可以调用 "),t("code",[e._v("super")]),e._v(" 将父级区块中的内容渲染到子区块。")]),e._v(" "),t("div",{staticClass:"language-njk extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//如果前面的子模板是这样\n{% block right %}\n{{ super() }}\nRight side\n{% endblock %}\n\n//result\nThis is more content\nRight side\n")])])]),t("h2",{attrs:{id:"标签"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标签","aria-hidden":"true"}},[e._v("#")]),e._v(" 标签")]),e._v(" "),t("p",[e._v("标签是一些特殊的区块，可以对模板执行一些操作。可自定义标签")]),e._v(" "),t("h3",{attrs:{id:"if"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#if","aria-hidden":"true"}},[e._v("#")]),e._v(" if")]),e._v(" "),t("div",{staticClass:"language-njk extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("{% if flag %}\n    It is true\n{% endif %}\n\n\n{% if A % }\n    a\n{% elif B %}\n    b\n{% else %}\n    c\n{% endif %}\n")])])]),t("h3",{attrs:{id:"for"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#for","aria-hidden":"true"}},[e._v("#")]),e._v(" for")]),e._v(" "),t("p",[e._v("可以遍历数组和对象")]),e._v(" "),t("div",{staticClass:"language-njk extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//js\nvar items = [{title: 'foo', id: 1}, {title: 'bar', id: 2}]\n\n<h1>for</h1>\n<ul>\n{% for item in items %}\n<li>{{item.title}}</li>\n{% else %}\n    <li>items</li>\n{% endfor %}>\n</ul>\n\n\n//js Nunjucks 会将数组解开，数组内的值对应到变量\nvar points = [[0, 1, 2], [5, 6, 7], [12, 13, 14]];\n\n{% for x, y, z in points %}\n  Point: {{ x }}, {{ y }}, {{ z }}\n{% endfor %}\n")])])]),t("p",[e._v("在循环中可获取一些特殊的变量")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("loop.index")]),e._v(": 当前循环数 (1 indexed)")]),e._v(" "),t("li",[t("code",[e._v("loop.index0")]),e._v(": 当前循环数 (0 indexed)")]),e._v(" "),t("li",[t("code",[e._v("loop.revindex")]),e._v(": 当前循环数，从后往前 (1 indexed)")]),e._v(" "),t("li",[t("code",[e._v("loop.revindex0")]),e._v(": 当前循环数，从后往前 (0 based)")]),e._v(" "),t("li",[t("code",[e._v("loop.first")]),e._v(": 是否第一个")]),e._v(" "),t("li",[t("code",[e._v("loop.last")]),e._v(": 是否最后一个")]),e._v(" "),t("li",[t("code",[e._v("loop.length")]),e._v(": 总数")])]),e._v(" "),t("h3",{attrs:{id:"macro"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#macro","aria-hidden":"true"}},[e._v("#")]),e._v(" macro")]),e._v(" "),t("p",[e._v("定义可复用的内容，类似函数。")]),e._v(" "),t("div",{staticClass:"language-njk extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("{% macro field(name, value='', type='text') %}\n<div class=\"field\">\n  <input type=\"{{ type }}\" name=\"{{ name }}\"\n         value=\"{{ value | escape }}\" />\n</div>\n{% endmacro %}\n\n//field 可当函数一样使用了\n{{ field('user') }}\n{{ field('pass', type='password') }}\n")])])]),t("p",[e._v("还可以从其他模板 "),t("code",[e._v("import")]),e._v(" 宏，可以使宏在整个项目中复用。")]),e._v(" "),t("h3",{attrs:{id:"set"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#set","aria-hidden":"true"}},[e._v("#")]),e._v(" set")]),e._v(" "),t("p",[e._v("用于设置和修改变量。")]),e._v(" "),t("div",{staticClass:"language-njk extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{{ username }}\n{% set username = "joe" %}\n{{ username }}\n')])])]),t("p",[e._v("未完")]),e._v(" "),t("h3",{attrs:{id:"block"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#block","aria-hidden":"true"}},[e._v("#")]),e._v(" block")]),e._v(" "),t("p",[e._v("区块定义了模板片段并标识了一个名字，在模板中"),t("strong",[e._v("继承")]),e._v("使用。父级模板可指定一个区块，子模板覆盖这个区块。")]),e._v(" "),t("div",{staticClass:"language-njk extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{% block css %}\n<link rel="stylesheet" href="app.css" />\n{% endblock %}\n\n//在循环中定义块\n{% for item in items %}\n{% block item %}{{ item }}{% endblock %}\n{% endfor %}\n')])])]),t("h3",{attrs:{id:"include"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#include","aria-hidden":"true"}},[e._v("#")]),e._v(" include")]),e._v(" "),t("p",[e._v("用于引入其他模板，可在多模板之间共享一些小模板。")]),e._v(" "),t("div",{staticClass:"language-njk extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{% include "item.html" %}\n\n//循环中引入模板\n{% for item in items %}\n{% include "item.html" %}\n{% endfor %}\n\n//可以接受任意表达式，只要它最终返回一个字符串或是模板所编译成的对象\n{% include name + ".html" as obj %}\n\n//希望模板文件不存在时不要抛出异常\n{% include "missing.html" ignore missing %}\n')])])]),t("p",[e._v("当我们需要改变页面时，我们可以渲染这些小部分的模板，而非一整个的大的模板。")]),e._v(" "),t("h3",{attrs:{id:"import"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#import","aria-hidden":"true"}},[e._v("#")]),e._v(" import")]),e._v(" "),t("h3",{attrs:{id:"raw"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#raw","aria-hidden":"true"}},[e._v("#")]),e._v(" raw")]),e._v(" "),t("h3",{attrs:{id:"filter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#filter","aria-hidden":"true"}},[e._v("#")]),e._v(" filter")]),e._v(" "),t("p",[t("code",[e._v("filter")]),e._v(" 区块允许我们使用区块中的内容来调用过滤器。不同于使用 "),t("code",[e._v("|")]),e._v(" 语法，它会将区块渲染出的内容传递给过滤器。")]),e._v(" "),t("div",{staticClass:"language-njk extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{% filter title %}\nmay the force be with you\n{% endfilter %}\n\n{% filter replace("force", "forth") %}\nmay the force be with you\n{% endfilter %}\n')])])]),t("p",[t("strong",[e._v("不能在这些区块中进行任何异步操作")])]),e._v(" "),t("h3",{attrs:{id:"call"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#call","aria-hidden":"true"}},[e._v("#")]),e._v(" call")]),e._v(" "),t("p",[t("code",[e._v("call")]),e._v(" 区块允许你使用标签之间的内容来调用一个宏。这在你需要给宏传入大量内容时是十分有用的。在宏中，你可以通过 "),t("code",[e._v("caller()")]),e._v(" 来获取这些内容。")]),e._v(" "),t("div",{staticClass:"language-njk extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("{% macro add(x, y) %}\n{{ caller() }}: {{ x + y }}\n{% endmacro%}\n\n{% call add(1, 2) -%}\nThe result is\n{%- endcall %}\n\n输出The result is: 3\n")])])]),t("h2",{attrs:{id:"关键字参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关键字参数","aria-hidden":"true"}},[e._v("#")]),e._v(" 关键字参数")]),e._v(" "),t("div",{staticClass:"language-njk extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("{{ foo(1, 2, bar=3, baz=4) }}\n\n//定义宏的时候也可以使用关键字参数，定义参数值时可设置默认值\n{% macro foo(x, y, z=5, w=6) %}\n{{ x }}, {{ y }}, {{ z }}, {{ w}}\n{% endmacro %}\n\n{{ foo(1, 2) }}        -> 1, 2, 5, 6\n{{ foo(1, 2, w=10) }}  -> 1, 2, 5, 10\n")])])]),t("h2",{attrs:{id:"注释"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注释","aria-hidden":"true"}},[e._v("#")]),e._v(" 注释")]),e._v(" "),t("div",{staticClass:"language-njk extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("{# Loop through all the users #}\n{% for user in users %}...{% endfor %}\n")])])]),t("h2",{attrs:{id:"空白字符控制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#空白字符控制","aria-hidden":"true"}},[e._v("#")]),e._v(" 空白字符控制")]),e._v(" "),t("p",[e._v("模板在正常情况会将变量 (variable) 和标签区块 (tag blocks) 周围的空白字符完全输出。\n可以在开始和结束区块 (start or end block tag) 添加 (-) 来去除前面和后面的空白字符。")]),e._v(" "),t("div",{staticClass:"language-njk extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("{% for i in [1,2,3,4,5] -%}\n  {{ i }}\n{%- endfor %}\n")])])]),t("p",[t("code",[e._v("-%}")]),e._v(" 会去除标签右侧的空白字符，"),t("code",[e._v("{%-")]),e._v(" 会去除标签之前的空白字符")]),e._v(" "),t("h2",{attrs:{id:"自动转义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自动转义","aria-hidden":"true"}},[e._v("#")]),e._v(" 自动转义")]),e._v(" "),t("p",[e._v("如果在环境变量中设置了 autoescaping，所有的输出都会自动转义，但可以使用 safe 过滤器，Nunjucks 就不会转义了。")]),e._v(" "),t("div",{staticClass:"language-njk extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("{{ foo }}           // &lt;span%gt;\n{{ foo | safe }}    // <span>\n")])])]),t("p",[e._v("如果未开启 autoescaping，所有的输出都会如实输出，但可以使用 escape 过滤器来转义。")]),e._v(" "),t("div",{staticClass:"language-njk extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("{{ foo }}           // <span>\n{{ foo | escape }}  // &lt;span&gt;\n")])])]),t("h2",{attrs:{id:"全局函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#全局函数","aria-hidden":"true"}},[e._v("#")]),e._v(" 全局函数")]),e._v(" "),t("h3",{attrs:{id:"range-start-stop-step"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#range-start-stop-step","aria-hidden":"true"}},[e._v("#")]),e._v(" range([start], stop, [step])")]),e._v(" "),t("div",{staticClass:"language-njk extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("{% for i in range(0, 5) -%}\n  {{ i }},\n{%- endfor %}\n\n0,1,2,3,4\n")])])]),t("h3",{attrs:{id:"cycler-item1-item2-itemn"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cycler-item1-item2-itemn","aria-hidden":"true"}},[e._v("#")]),e._v(" cycler(item1, item2, ...itemN)")]),e._v(" "),t("p",[e._v("可以循环调用你指定的一系列的值")]),e._v(" "),t("div",{staticClass:"language-njk extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{% set cls = cycler("odd", "even") %}\n{% for row in rows %}\n  <div class="{{ cls.next() }}">{{ row.name }}</div>\n{% endfor %}\n\n//奇数行的 class 为 "odd"，偶数行的 class 为 "even"。你可以使用current属性来获取当前项,在上面的例子中对应cls.current\n')])])]),t("h3",{attrs:{id:"joiner-separator"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#joiner-separator","aria-hidden":"true"}},[e._v("#")]),e._v(" joiner([separator])")]),e._v(" "),t("p",[e._v('当合并多项的时候，希望在他们之间又分隔符 (像逗号)，但又不希望第一项也输出。joiner 将输出分割符 (默认为 ",") 除了第一次调用。')]),e._v(" "),t("div",{staticClass:"language-njk extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{% set comma = joiner() %}\n{% for tag in tags -%}\n  {{ comma() }} {{ tag }}\n{%- endfor %}\n\n//如果 tags 为 ["food", "beer", "dessert"], 上面将输出 food, beer, dessert\n')])])])])}],!1,null,null,null);n.options.__file="note-nunjucks.md";a.default=n.exports}}]);